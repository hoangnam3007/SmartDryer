package com.project.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SaleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAllPropertiesEquals(Sale expected, Sale actual) {
        assertSaleAutoGeneratedPropertiesEquals(expected, actual);
        assertSaleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAllUpdatablePropertiesEquals(Sale expected, Sale actual) {
        assertSaleUpdatableFieldsEquals(expected, actual);
        assertSaleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAutoGeneratedPropertiesEquals(Sale expected, Sale actual) {
        assertThat(expected)
            .as("Verify Sale auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleUpdatableFieldsEquals(Sale expected, Sale actual) {
        assertThat(expected)
            .as("Verify Sale relevant properties")
            .satisfies(e -> assertThat(e.getUserName()).as("check userName").isEqualTo(actual.getUserName()))
            .satisfies(e -> assertThat(e.getFullName()).as("check fullName").isEqualTo(actual.getFullName()))
            .satisfies(e -> assertThat(e.getMobile()).as("check mobile").isEqualTo(actual.getMobile()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(e -> assertThat(e.getCreateDate()).as("check createDate").isEqualTo(actual.getCreateDate()))
            .satisfies(e -> assertThat(e.getModifiedDate()).as("check modifiedDate").isEqualTo(actual.getModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleUpdatableRelationshipsEquals(Sale expected, Sale actual) {
        // empty method
    }
}
