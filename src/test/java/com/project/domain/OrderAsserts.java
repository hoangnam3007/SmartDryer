package com.project.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAllPropertiesEquals(Order expected, Order actual) {
        assertOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAllUpdatablePropertiesEquals(Order expected, Order actual) {
        assertOrderUpdatableFieldsEquals(expected, actual);
        assertOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAutoGeneratedPropertiesEquals(Order expected, Order actual) {
        assertThat(expected)
            .as("Verify Order auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderUpdatableFieldsEquals(Order expected, Order actual) {
        assertThat(expected)
            .as("Verify Order relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getCreateBy()).as("check createBy").isEqualTo(actual.getCreateBy()))
            .satisfies(e -> assertThat(e.getCreateDate()).as("check createDate").isEqualTo(actual.getCreateDate()))
            .satisfies(e -> assertThat(e.getFinishDate()).as("check finishDate").isEqualTo(actual.getFinishDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getSaleNote()).as("check saleNote").isEqualTo(actual.getSaleNote()))
            .satisfies(e -> assertThat(e.getTechNote()).as("check techNote").isEqualTo(actual.getTechNote()))
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(e -> assertThat(e.getMaterialSource()).as("check materialSource").isEqualTo(actual.getMaterialSource()))
            .satisfies(e -> assertThat(e.getCusName()).as("check cusName").isEqualTo(actual.getCusName()))
            .satisfies(e -> assertThat(e.getCusAddress()).as("check cusAddress").isEqualTo(actual.getCusAddress()))
            .satisfies(e -> assertThat(e.getCusMobile()).as("check cusMobile").isEqualTo(actual.getCusMobile()))
            .satisfies(e -> assertThat(e.getImageURL()).as("check imageURL").isEqualTo(actual.getImageURL()))
            .satisfies(e -> assertThat(e.getAppointmentDate()).as("check appointmentDate").isEqualTo(actual.getAppointmentDate()))
            .satisfies(e -> assertThat(e.getActivation()).as("check activation").isEqualTo(actual.getActivation()))
            .satisfies(e -> assertThat(e.getAssignBy()).as("check assignBy").isEqualTo(actual.getAssignBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderUpdatableRelationshipsEquals(Order expected, Order actual) {
        assertThat(expected)
            .as("Verify Order relationships")
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()))
            .satisfies(e -> assertThat(e.getSale()).as("check sale").isEqualTo(actual.getSale()))
            .satisfies(e -> assertThat(e.getStaff()).as("check staff").isEqualTo(actual.getStaff()))
            .satisfies(e -> assertThat(e.getSourceOrder()).as("check sourceOrder").isEqualTo(actual.getSourceOrder()))
            .satisfies(e -> assertThat(e.getProvince()).as("check province").isEqualTo(actual.getProvince()))
            .satisfies(e -> assertThat(e.getDistrict()).as("check district").isEqualTo(actual.getDistrict()))
            .satisfies(e -> assertThat(e.getWard()).as("check ward").isEqualTo(actual.getWard()));
    }
}
