package com.project.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HistoryOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryOrderAllPropertiesEquals(HistoryOrder expected, HistoryOrder actual) {
        assertHistoryOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertHistoryOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryOrderAllUpdatablePropertiesEquals(HistoryOrder expected, HistoryOrder actual) {
        assertHistoryOrderUpdatableFieldsEquals(expected, actual);
        assertHistoryOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryOrderAutoGeneratedPropertiesEquals(HistoryOrder expected, HistoryOrder actual) {
        assertThat(expected)
            .as("Verify HistoryOrder auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryOrderUpdatableFieldsEquals(HistoryOrder expected, HistoryOrder actual) {
        assertThat(expected)
            .as("Verify HistoryOrder relevant properties")
            .satisfies(e -> assertThat(e.getModifiedBy()).as("check modifiedBy").isEqualTo(actual.getModifiedBy()))
            .satisfies(e -> assertThat(e.getStatusNew()).as("check statusNew").isEqualTo(actual.getStatusNew()))
            .satisfies(e -> assertThat(e.getStatusOld()).as("check statusOld").isEqualTo(actual.getStatusOld()))
            .satisfies(e -> assertThat(e.getModifiedDate()).as("check modifiedDate").isEqualTo(actual.getModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryOrderUpdatableRelationshipsEquals(HistoryOrder expected, HistoryOrder actual) {
        assertThat(expected)
            .as("Verify HistoryOrder relationships")
            .satisfies(e -> assertThat(e.getOrder()).as("check order").isEqualTo(actual.getOrder()));
    }
}
