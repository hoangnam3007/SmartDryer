package com.project.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SendSMSAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendSMSAllPropertiesEquals(SendSMS expected, SendSMS actual) {
        assertSendSMSAutoGeneratedPropertiesEquals(expected, actual);
        assertSendSMSAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendSMSAllUpdatablePropertiesEquals(SendSMS expected, SendSMS actual) {
        assertSendSMSUpdatableFieldsEquals(expected, actual);
        assertSendSMSUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendSMSAutoGeneratedPropertiesEquals(SendSMS expected, SendSMS actual) {
        assertThat(expected)
            .as("Verify SendSMS auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendSMSUpdatableFieldsEquals(SendSMS expected, SendSMS actual) {
        assertThat(expected)
            .as("Verify SendSMS relevant properties")
            .satisfies(e -> assertThat(e.getMobile()).as("check mobile").isEqualTo(actual.getMobile()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCreateDate()).as("check createDate").isEqualTo(actual.getCreateDate()))
            .satisfies(e -> assertThat(e.getSendedDate()).as("check sendedDate").isEqualTo(actual.getSendedDate()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendSMSUpdatableRelationshipsEquals(SendSMS expected, SendSMS actual) {
        // empty method
    }
}
